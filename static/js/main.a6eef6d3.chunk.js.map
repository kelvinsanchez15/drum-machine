{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bank","id","keyTrigger","url","Pad","props","playAudio","audio","document","getElementById","play","currentTime","onClick","padId","keyHandler","key","toLowerCase","useEffect","window","addEventListener","removeEventListener","className","audioId","src","audioSrc","App","useState","display","setDisplay","map","item","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAIMA,G,MAAO,CACX,CACEC,GAAI,WACJC,WAAY,IACZC,IAAK,gBAEP,CACEF,GAAI,WACJC,WAAY,IACZC,IAAK,gBAEP,CACEF,GAAI,WACJC,WAAY,IACZC,IAAK,gBAEP,CACEF,GAAI,WACJC,WAAY,IACZC,IAAK,kBAEP,CACEF,GAAI,OACJC,WAAY,IACZC,IAAK,gBAEP,CACEF,GAAI,UACJC,WAAY,IACZC,IAAK,cAEP,CACEF,GAAI,cACJC,WAAY,IACZC,IAAK,kBAEP,CACEF,GAAI,OACJC,WAAY,IACZC,IAAK,kBAEP,CACEF,GAAI,YACJC,WAAY,IACZC,IAAK,gBAIT,SAASC,EAAIC,GACX,IAAMC,EAAY,WAChB,IAAIC,EAAQC,SAASC,eAAeJ,EAAMH,YAC1CK,EAAMG,OACNH,EAAMI,YAAc,EACpBN,EAAMO,QAAQP,EAAMQ,QAGhBC,EAAa,SAAC,GAAY,EAAVC,MACRV,EAAMH,WAAWc,eAC3BV,KAWJ,OAPAW,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWL,GAC5B,WACLI,OAAOE,oBAAoB,UAAWN,OAKxC,yBAAKb,GAAII,EAAMQ,MAAOQ,UAAU,WAAWT,QAASN,GAClD,2BAAOL,GAAII,EAAMiB,QAASD,UAAU,OAAOE,IAAKlB,EAAMmB,WACrDnB,EAAMH,YAKE,SAASuB,IAAO,IAAD,EACEC,mBAAS,QADX,mBACrBC,EADqB,KACZC,EADY,KAG5B,OACE,yBAAKP,UAAU,OACb,yBAAKpB,GAAG,gBACN,4CACA,yBAAKA,GAAG,uBACLD,EAAK6B,KAAI,SAACC,GAAD,OACR,kBAAC1B,EAAD,CACEW,IAAKe,EAAK7B,GACVY,MAAOiB,EAAK7B,GACZC,WAAY4B,EAAK5B,WACjBsB,SA3FE,+CA2FkBM,EAAK3B,IACzBmB,QAASQ,EAAK5B,WACdU,QAAS,SAACmB,GAAD,OAAWH,EAAWG,SAGnC,4BAAKJ,MCvFKK,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAASC,eAAe,SDyHpB,kBAAmB8B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a6eef6d3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst baseUrl = \"https://s3.amazonaws.com/freecodecamp/drums/\";\nconst bank = [\n  {\n    id: \"Heater-1\",\n    keyTrigger: \"Q\",\n    url: \"Heater-1.mp3\",\n  },\n  {\n    id: \"Heater-2\",\n    keyTrigger: \"W\",\n    url: \"Heater-2.mp3\",\n  },\n  {\n    id: \"Heater-3\",\n    keyTrigger: \"E\",\n    url: \"Heater-3.mp3\",\n  },\n  {\n    id: \"Heater-4\",\n    keyTrigger: \"A\",\n    url: \"Heater-4_1.mp3\",\n  },\n  {\n    id: \"Clap\",\n    keyTrigger: \"S\",\n    url: \"Heater-6.mp3\",\n  },\n  {\n    id: \"Open-HH\",\n    keyTrigger: \"D\",\n    url: \"Dsc_Oh.mp3\",\n  },\n  {\n    id: \"Kick-n'-Hat\",\n    keyTrigger: \"Z\",\n    url: \"Kick_n_Hat.mp3\",\n  },\n  {\n    id: \"Kick\",\n    keyTrigger: \"X\",\n    url: \"RP4_KICK_1.mp3\",\n  },\n  {\n    id: \"Closed-HH\",\n    keyTrigger: \"C\",\n    url: \"Cev_H2.mp3\",\n  },\n];\n\nfunction Pad(props) {\n  const playAudio = () => {\n    let audio = document.getElementById(props.keyTrigger);\n    audio.play();\n    audio.currentTime = 0;\n    props.onClick(props.padId);\n  };\n\n  const keyHandler = ({ key }) => {\n    if (key === props.keyTrigger.toLowerCase()) {\n      playAudio();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", keyHandler);\n    };\n  });\n\n  return (\n    <div id={props.padId} className=\"drum-pad\" onClick={playAudio}>\n      <audio id={props.audioId} className=\"clip\" src={props.audioSrc}></audio>\n      {props.keyTrigger}\n    </div>\n  );\n}\n\nexport default function App() {\n  const [display, setDisplay] = useState(\"HOLA\");\n\n  return (\n    <div className=\"App\">\n      <div id=\"drum-machine\">\n        <h1>Drum Machine</h1>\n        <div id=\"drum-pads-container\">\n          {bank.map((item) => (\n            <Pad\n              key={item.id}\n              padId={item.id}\n              keyTrigger={item.keyTrigger}\n              audioSrc={baseUrl + item.url}\n              audioId={item.keyTrigger}\n              onClick={(value) => setDisplay(value)}\n            />\n          ))}\n          <h1>{display}</h1>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}