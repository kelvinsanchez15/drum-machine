{"version":3,"sources":["components/Pad.js","App.js","serviceWorker.js","index.js"],"names":["Pad","props","playAudio","powerControl","audio","document","getElementById","keyTrigger","play","currentTime","volume","volumeControl","onClick","padId","keyHandler","keyCode","useEffect","window","addEventListener","removeEventListener","id","className","audioId","src","audioSrc","bank","url","App","useState","display","setDisplay","power","setPower","setVolume","map","item","key","value","type","defaultValue","onChange","e","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAEe,SAASA,EAAIC,GAC1B,IAAMC,EAAY,WAChB,GAAID,EAAME,aAAc,CACtB,IAAIC,EAAQC,SAASC,eAAeL,EAAMM,YAC1CH,EAAMI,OACNJ,EAAMK,YAAc,EACpBL,EAAMM,OAAST,EAAMU,cAAgB,IACrCV,EAAMW,QAAQX,EAAMY,SAIlBC,EAAa,SAAC,GAAgB,EAAdC,UACJd,EAAMc,SACpBb,KAWJ,OAPAc,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWJ,GAC5B,WACLG,OAAOE,oBAAoB,UAAWL,OAKxC,yBAAKM,GAAInB,EAAMY,MAAOQ,UAAU,WAAWT,QAASV,GAClD,2BAAOkB,GAAInB,EAAMqB,QAASD,UAAU,OAAOE,IAAKtB,EAAMuB,WACrDvB,EAAMM,Y,UCxBPkB,EAAO,CACX,CACEL,GAAI,WACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,gBAEP,CACEN,GAAI,WACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,gBAEP,CACEN,GAAI,WACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,gBAEP,CACEN,GAAI,WACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,kBAEP,CACEN,GAAI,OACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,gBAEP,CACEN,GAAI,UACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,cAEP,CACEN,GAAI,cACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,kBAEP,CACEN,GAAI,OACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,kBAEP,CACEN,GAAI,YACJL,QAAS,GACTR,WAAY,IACZmB,IAAK,eAIM,SAASC,IAAO,IAAD,EACEC,mBAAS,QADX,mBACrBC,EADqB,KACZC,EADY,OAEFF,oBAAS,GAFP,mBAErBG,EAFqB,KAEdC,EAFc,OAGAJ,mBAAS,IAHT,mBAGrBlB,EAHqB,KAGbuB,EAHa,KAS5B,OACE,yBAAKZ,UAAU,OACb,yBAAKD,GAAG,gBACN,4CACA,yBAAKA,GAAG,uBACLK,EAAKS,KAAI,SAACC,GAAD,OACR,kBAACnC,EAAD,CACEoC,IAAKD,EAAKf,GACVP,MAAOsB,EAAKf,GACZL,QAASoB,EAAKpB,QACdR,WAAY4B,EAAK5B,WACjBiB,SA9EE,+CA8EkBW,EAAKT,IACzBJ,QAASa,EAAK5B,WACdK,QAAS,SAACyB,GAAD,OAAWP,EAAWO,IAC/BlC,aAAc4B,EACdpB,cAAeD,QAIrB,yBAAKU,GAAG,gBACN,yBAAKA,GAAG,SAAR,gBACA,yBAAKA,GAAG,WACLS,EACD,yBAAKR,UAAU,UACb,8BAAOU,EAAQ,KAAO,OACtB,sCAAYrB,KAGhB,yBAAKU,GAAG,UACN,yBAAKR,QAAS,kBAAMoB,GAAUD,KAA9B,WACA,2BACEX,GAAG,SACHkB,KAAK,QACLC,aAAc7B,EACd8B,SAtCU,SAACC,GACrBR,EAAUQ,EAAEC,OAAOL,cCxDHM,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASC,eAAe,SDyHpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d770df0.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nexport default function Pad(props) {\r\n  const playAudio = () => {\r\n    if (props.powerControl) {\r\n      let audio = document.getElementById(props.keyTrigger);\r\n      audio.play();\r\n      audio.currentTime = 0;\r\n      audio.volume = props.volumeControl / 100;\r\n      props.onClick(props.padId);\r\n    }\r\n  };\r\n\r\n  const keyHandler = ({ keyCode }) => {\r\n    if (keyCode === props.keyCode) {\r\n      playAudio();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", keyHandler);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", keyHandler);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div id={props.padId} className=\"drum-pad\" onClick={playAudio}>\r\n      <audio id={props.audioId} className=\"clip\" src={props.audioSrc}></audio>\r\n      {props.keyTrigger}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport Pad from \"./components/Pad.js\";\nimport \"./App.css\";\n\nconst baseUrl = \"https://s3.amazonaws.com/freecodecamp/drums/\";\nconst bank = [\n  {\n    id: \"Heater-1\",\n    keyCode: 81,\n    keyTrigger: \"Q\",\n    url: \"Heater-1.mp3\",\n  },\n  {\n    id: \"Heater-2\",\n    keyCode: 87,\n    keyTrigger: \"W\",\n    url: \"Heater-2.mp3\",\n  },\n  {\n    id: \"Heater-3\",\n    keyCode: 69,\n    keyTrigger: \"E\",\n    url: \"Heater-3.mp3\",\n  },\n  {\n    id: \"Heater-4\",\n    keyCode: 65,\n    keyTrigger: \"A\",\n    url: \"Heater-4_1.mp3\",\n  },\n  {\n    id: \"Clap\",\n    keyCode: 83,\n    keyTrigger: \"S\",\n    url: \"Heater-6.mp3\",\n  },\n  {\n    id: \"Open-HH\",\n    keyCode: 68,\n    keyTrigger: \"D\",\n    url: \"Dsc_Oh.mp3\",\n  },\n  {\n    id: \"Kick-n'-Hat\",\n    keyCode: 90,\n    keyTrigger: \"Z\",\n    url: \"Kick_n_Hat.mp3\",\n  },\n  {\n    id: \"Kick\",\n    keyCode: 88,\n    keyTrigger: \"X\",\n    url: \"RP4_KICK_1.mp3\",\n  },\n  {\n    id: \"Closed-HH\",\n    keyCode: 67,\n    keyTrigger: \"C\",\n    url: \"Cev_H2.mp3\",\n  },\n];\n\nexport default function App() {\n  const [display, setDisplay] = useState(\"Play\");\n  const [power, setPower] = useState(true);\n  const [volume, setVolume] = useState(75);\n\n  const changeHangler = (e) => {\n    setVolume(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"drum-machine\">\n        <h1>Drum Machine</h1>\n        <div id=\"drum-pads-container\">\n          {bank.map((item) => (\n            <Pad\n              key={item.id}\n              padId={item.id}\n              keyCode={item.keyCode}\n              keyTrigger={item.keyTrigger}\n              audioSrc={baseUrl + item.url}\n              audioId={item.keyTrigger}\n              onClick={(value) => setDisplay(value)}\n              powerControl={power}\n              volumeControl={volume}\n            />\n          ))}\n        </div>\n        <div id=\"ui-container\">\n          <div id=\"title\">Drum machine</div>\n          <div id=\"display\">\n            {display}\n            <div className=\"status\">\n              <span>{power ? \"ON\" : \"OFF\"}</span>\n              <span>vol: {volume}</span>\n            </div>\n          </div>\n          <div id=\"inputs\">\n            <div onClick={() => setPower(!power)}>Pwr Btn</div>\n            <input\n              id=\"volume\"\n              type=\"range\"\n              defaultValue={volume}\n              onChange={changeHangler}\n            ></input>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}