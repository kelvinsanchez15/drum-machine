{"version":3,"sources":["sounds/Open-HH.mp3","sounds/Crash-Cymbal.mp3","sounds/Ride-Cymbal.mp3","sounds/High-Tom.mp3","sounds/Mid-Tom.mp3","sounds/Low-Tom.mp3","sounds/Closed-HH.mp3","sounds/Kick.mp3","sounds/Snare.mp3","components/UserInterface.js","components/Pad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserInterface","props","id","className","display","powerState","volumeLevel","type","orient","defaultValue","onChange","onVolumeChange","onClick","onPowerClick","Pad","useState","fadeProp","setfadeProp","playAudio","audio","document","getElementById","keyTrigger","currentTime","play","volume","updateDisplay","padId","keyHandler","keyCode","useEffect","window","addEventListener","removeEventListener","CSSTransition","in","timeout","onEntered","exit","classNames","audioId","src","audioSrc","bank","openHH","crashCymbal","rideCymbal","highTom","midTom","lowTom","closedHH","kick","snare","App","setDisplay","power","setPower","setVolume","displayHandler","value","e","target","map","item","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.413b1605.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Open-HH.152dc562.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Crash-Cymbal.83ab3994.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Ride-Cymbal.4e97154a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/High-Tom.57ce0828.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Mid-Tom.4b05f687.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Low-Tom.678c4a0a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Closed-HH.58f51fd4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Kick.c9ee3842.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Snare.4483a692.mp3\";","import React from \"react\";\r\nimport \"./UserInterface.scss\";\r\nimport { FaPowerOff, FaDrum } from \"react-icons/fa\";\r\n\r\nexport default function UserInterface(props) {\r\n  return (\r\n    <>\r\n      <div id=\"title\">\r\n        <div>DRUM MACHINE</div>\r\n        <div className=\"title-icon\">\r\n          <FaDrum />\r\n        </div>\r\n      </div>\r\n      <div id=\"display\">\r\n        <div id=\"display-text\">{props.display}</div>\r\n        <div id=\"status\">\r\n          <span id=\"status-volume\">\r\n            VOL : {props.powerState ? props.volumeLevel : \"\"}\r\n          </span>\r\n          <span>{props.powerState ? \"ON\" : \"OFF\"}</span>\r\n        </div>\r\n      </div>\r\n      <div id=\"controls\">\r\n        <div className=\"controls-volume\">\r\n          <div className=\"slider-wrapper\">\r\n            <input\r\n              id=\"volume\"\r\n              type=\"range\"\r\n              orient=\"vertical\"\r\n              defaultValue={props.volumeLevel}\r\n              onChange={props.onVolumeChange}\r\n            ></input>\r\n          </div>\r\n          <div>VOL</div>\r\n        </div>\r\n        <div className=\"controls-power\">\r\n          <div className=\"btn-wrapper\" onClick={props.onPowerClick}>\r\n            <div className={props.powerState ? \"pwr-btn-on\" : \"pwr-btn-off\"}>\r\n              <FaPowerOff />\r\n            </div>\r\n          </div>\r\n          <div>POWER</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Pad.scss\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nexport default function Pad(props) {\r\n  const [fadeProp, setfadeProp] = useState(false);\r\n\r\n  const playAudio = () => {\r\n    // playAudio logic only runs when power is set to true\r\n    if (props.powerState) {\r\n      // Get html audio element with a selector\r\n      const audio = document.getElementById(props.keyTrigger);\r\n      audio.currentTime = 0;\r\n      audio.play();\r\n      audio.volume = props.volumeLevel / 100;\r\n      // Update display text\r\n      props.updateDisplay(props.padId);\r\n      // Apply fade transition\r\n      setfadeProp(true);\r\n    }\r\n  };\r\n\r\n  const keyHandler = ({ keyCode }) => {\r\n    if (keyCode === props.keyCode) {\r\n      playAudio();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", keyHandler);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", keyHandler);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={fadeProp}\r\n      timeout={100}\r\n      onEntered={() => setfadeProp(false)}\r\n      exit={false}\r\n      classNames=\"fade\"\r\n    >\r\n      <div id={props.padId} className=\"drum-pad\" onClick={playAudio}>\r\n        <audio id={props.audioId} className=\"clip\" src={props.audioSrc}></audio>\r\n        {props.keyTrigger}\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\n// Components import\nimport UserInterface from \"./components/UserInterface.js\";\nimport Pad from \"./components/Pad.js\";\n// Drumkit library imports\nimport openHH from \"./sounds/Open-HH.mp3\";\nimport crashCymbal from \"./sounds/Crash-Cymbal.mp3\";\nimport rideCymbal from \"./sounds/Ride-Cymbal.mp3\";\nimport highTom from \"./sounds/High-Tom.mp3\";\nimport midTom from \"./sounds/Mid-Tom.mp3\";\nimport lowTom from \"./sounds/Low-Tom.mp3\";\nimport closedHH from \"./sounds/Closed-HH.mp3\";\nimport kick from \"./sounds/Kick.mp3\";\nimport snare from \"./sounds/Snare.mp3\";\n\nconst bank = [\n  {\n    id: \"Open-HH\",\n    keyCode: 81,\n    keyTrigger: \"Q\",\n    src: openHH,\n  },\n  {\n    id: \"Crash-Cymbal\",\n    keyCode: 87,\n    keyTrigger: \"W\",\n    src: crashCymbal,\n  },\n  {\n    id: \"Ride-Cymbal\",\n    keyCode: 69,\n    keyTrigger: \"E\",\n    src: rideCymbal,\n  },\n  {\n    id: \"High-Tom\",\n    keyCode: 65,\n    keyTrigger: \"A\",\n    src: highTom,\n  },\n  {\n    id: \"Mid-Tom\",\n    keyCode: 83,\n    keyTrigger: \"S\",\n    src: midTom,\n  },\n  {\n    id: \"Low-Tom\",\n    keyCode: 68,\n    keyTrigger: \"D\",\n    src: lowTom,\n  },\n  {\n    id: \"Closed-HH\",\n    keyCode: 90,\n    keyTrigger: \"Z\",\n    src: closedHH,\n  },\n  {\n    id: \"Kick\",\n    keyCode: 88,\n    keyTrigger: \"X\",\n    src: kick,\n  },\n  {\n    id: \"Snare\",\n    keyCode: 67,\n    keyTrigger: \"C\",\n    src: snare,\n  },\n];\n\nexport default function App() {\n  const [display, setDisplay] = useState(\"PLAY ALONG !\");\n  const [power, setPower] = useState(true);\n  const [volume, setVolume] = useState(35);\n\n  const displayHandler = (value) => {\n    setDisplay(value);\n  };\n\n  const powerHandler = () => {\n    setPower(!power);\n    !power ? setDisplay(\"WELCOME BACK\") : setDisplay(\"GOOD BYE!\");\n  };\n\n  const volumeHandler = (e) => {\n    setVolume(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"drum-machine\">\n        <div id=\"ui-container\">\n          <UserInterface\n            display={display}\n            powerState={power}\n            volumeLevel={volume}\n            onPowerClick={powerHandler}\n            onVolumeChange={volumeHandler}\n          />\n        </div>\n        <div id=\"drum-pads-container\">\n          {bank.map((item) => (\n            <Pad\n              key={item.id}\n              padId={item.id}\n              keyCode={item.keyCode}\n              keyTrigger={item.keyTrigger}\n              audioSrc={item.src}\n              audioId={item.keyTrigger}\n              updateDisplay={displayHandler}\n              powerState={power}\n              volumeLevel={volume}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}